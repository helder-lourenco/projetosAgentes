# -*- coding: utf-8 -*-
"""Projeto Imers√£o.py

Vers√£o atualizada com formata√ß√£o de e-mail melhorada.
"""

import os
from dotenv import load_dotenv
import streamlit as st
import google.generativeai as genai
from datetime import date
import smtplib
from email.mime.text import MIMEText

# --- Configura√ß√£o inicial ---
current_dir = os.path.dirname(__file__)
dotenv_path = os.path.join(current_dir, '..', '..', '.env')
load_dotenv(dotenv_path)

# Configura√ß√£o da API Gemini
api_key = os.getenv('GEMINI_API_KEY')
if not api_key:
    st.error("ERRO: Chave API n√£o encontrada. Verifique seu arquivo .env")
    st.stop()

genai.configure(api_key=api_key)
MODEL = genai.GenerativeModel('gemini-2.0-flash')

# Configura√ß√£o de e-mail
email_config = {
    'host': os.getenv('EMAIL_HOST'),
    'port': os.getenv('EMAIL_PORT'),
    'username': os.getenv('EMAIL_USERNAME'),
    'password': os.getenv('EMAIL_PASSWORD')
}

# --- Fun√ß√µes Principais ---
def generate_content(prompt):
    """Gera conte√∫do usando a API Gemini"""
    try:
        response = MODEL.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Erro ao gerar conte√∫do: {str(e)}")
        return None

def buscar_noticias(segmento):
    """Busca not√≠cias sobre IA para o segmento selecionado"""
    prompt = f"""
    Para o segmento {segmento}, liste em formato JSON:
    1. 3 ferramentas/tecnologias emergentes de IA com:
       - Nome
       - Descri√ß√£o (1-2 frases)
       - Ponto para discuss√£o (pergunta relevante)
    2. 3 desafios/boas pr√°ticas de seguran√ßa com IA com:
       - T√≥pico
       - Descri√ß√£o
       - Ponto para discuss√£o
    3. 3 casos de sucesso de implementa√ß√£o de IA com:
       - Caso
       - Descri√ß√£o
       - Ponto para discuss√£o
    4. 3 aprendizados/erros comuns com IA com:
       - T√≥pico
       - Descri√ß√£o
       - Ponto para discuss√£o
    """
    return generate_content(prompt)

def formatar_agenda(dados_noticias):
    """Formata os dados em uma agenda de discuss√£o profissional"""
    prompt = f"""
    Com base nestes dados sobre IA:
    {dados_noticias}
    
    Crie uma agenda de discuss√£o em MARKDOWN com este formato EXATO:

    ## üìå Sugest√£o de Pauta - Intelig√™ncia Artificial

    ### 1Ô∏è‚É£ Ferramentas e Tecnologias Emergentes
    üîπ **[Nome da Ferramenta]** - [Descri√ß√£o breve em 1-2 frases]
      *Ponto para discuss√£o:* [Pergunta aberta para debate]
    (Repetir para 3 ferramentas)

    ### 2Ô∏è‚É£ Desafios e Boas Pr√°ticas
    üî∏ **[T√≥pico de Desafio]** - [Descri√ß√£o breve]
      *Ponto para discuss√£o:* [Pergunta para reflex√£o]
    (Repetir para 3 desafios)

    ### 3Ô∏è‚É£ Casos de Sucesso
    üîπ **[Nome do Caso]** - [Descri√ß√£o breve]
      *Ponto para discuss√£o:* [Pergunta sobre aplica√ß√£o]
    (Repetir para 3 casos)

    ### 4Ô∏è‚É£ Aprendizados e Recomenda√ß√µes
    üî∏ **[T√≥pico de Aprendizado]** - [Descri√ß√£o breve]
      *Ponto para discuss√£o:* [Pergunta para melhoria]
    (Repetir para 3 aprendizados)

    Use emojis e formata√ß√£o consistente como no exemplo.
    """
    return generate_content(prompt)

def formatar_email(agenda, segmento):
    """Formata o corpo completo do e-mail"""
    prompt = f"""
    Com esta agenda:
    {agenda}
    
    Crie um e-mail profissional em MARKDOWN com este formato EXATO:

    Prezados(as) colegas,

    Espero que esta mensagem os encontre bem. Segue a sugest√£o de pauta para nossa pr√≥xima reuni√£o 
    sobre Intelig√™ncia Artificial no segmento {segmento}, com foco nas tend√™ncias atuais e li√ß√µes aprendidas.

    ---

    [INSIRA A AGENDA COMPLETA AQUI, MANTENDO A FORMATA√á√ÉO]

    ---

    Fico √† disposi√ß√£o para ajustes nesta proposta e para discutirmos esses t√≥picos em nossa reuni√£o.

    Atenciosamente,  
    [Seu Nome]  
    [Seu Cargo/√Årea]

    Observa√ß√µes:
    - Mantenha a formata√ß√£o MARKDOWN
    - Use os emojis e estrutura da agenda fornecida
    - N√£o altere os pontos de discuss√£o
    """
    return generate_content(prompt)

def enviar_email(destinatario, assunto, corpo):
    """Envia e-mail usando SMTP"""
    if not all(email_config.values()):
        st.error("Configura√ß√£o de e-mail incompleta")
        return False

    try:
        msg = MIMEText(corpo, 'html', 'utf-8')
        msg['Subject'] = assunto
        msg['From'] = email_config['username']
        msg['To'] = destinatario

        if email_config['port'] == '465':
            server = smtplib.SMTP_SSL(email_config['host'], int(email_config['port']))
        else:
            server = smtplib.SMTP(email_config['host'], int(email_config['port']))
            server.starttls()

        server.login(email_config['username'], email_config['password'])
        server.send_message(msg)
        server.quit()
        return True
    except Exception as e:
        st.error(f"Erro ao enviar e-mail: {str(e)}")
        return False

# --- Interface Streamlit ---
def main():
    st.set_page_config(
        page_title="Gerador de Agenda de IA",
        page_icon="ü§ñ",
        layout="wide"
    )

    # CSS personalizado
    st.markdown("""
    <style>
    .email-format {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 5px;
        border-left: 4px solid #3498db;
    }
    .email-format h2 {
        color: #2c3e50;
        border-bottom: 1px solid #eee;
        padding-bottom: 5px;
    }
    .email-format h3 {
        color: #3498db;
    }
    .discussion-point {
        font-style: italic;
        color: #7f8c8d;
    }
    </style>
    """, unsafe_allow_html=True)

    st.title("üìÖ Gerador de Agenda - IA e Inova√ß√£o")
    st.markdown("---")

    # Dados de configura√ß√£o
    segmentos = [
        'Todos', 'Tecnologia', 'Ind√∫stria', 
        'Sa√∫de', 'Educa√ß√£o', 'Finan√ßas'
    ]

    # Widgets de entrada
    col1, col2 = st.columns(2)
    with col1:
        segmento = st.selectbox("Segmento de Neg√≥cio", segmentos, index=0)
    with col2:
        destinatario = st.text_input("E-mail do Destinat√°rio")

    # Bot√£o de gera√ß√£o
    if st.button("Gerar Agenda Completa", type="primary"):
        with st.spinner("Criando conte√∫do personalizado..."):
            # Etapa 1: Buscar dados
            st.subheader("Dados Coletados")
            dados = buscar_noticias(segmento)
            if dados:
                st.json(dados, expanded=False)
            
            # Etapa 2: Formatando agenda
            st.subheader("Agenda Formatada")
            agenda = formatar_agenda(dados) if dados else None
            if agenda:
                st.markdown('<div class="email-format">' + agenda + '</div>', 
                           unsafe_allow_html=True)
            
            # Etapa 3: E-mail completo
            st.subheader("E-mail Pronto")
            corpo_email = formatar_email(agenda, segmento) if agenda else None
            if corpo_email:
                st.markdown('<div class="email-format">' + corpo_email + '</div>', 
                           unsafe_allow_html=True)
                
                # Armazena para envio
                st.session_state['email_data'] = {
                    'body': corpo_email,
                    'subject': f"Pauta IA - {segmento} - {date.today().strftime('%d/%m/%Y')}"
                }
                st.success("Conte√∫do gerado com sucesso!")

    # Bot√£o de envio
    if 'email_data' in st.session_state and destinatario:
        st.markdown("---")
        if st.button("Enviar E-mail", type="secondary"):
            if enviar_email(
                destinatario,
                st.session_state['email_data']['subject'],
                st.session_state['email_data']['body']
            ):
                st.balloons()
                st.success("E-mail enviado com sucesso!")

    # Bot√£o de limpeza
    if st.button("Limpar Tudo", key="clear"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()

if __name__ == "__main__":
    main()